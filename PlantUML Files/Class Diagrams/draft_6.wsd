@startuml Banking System
'#Major Classes
'#--------------------------------------------------
abstract class User {
    # name: String
    # ID: String
    __
    .. Constructors ..
    + User(String, String, String)
    .. Getters ..
    + getName(): String
    + getLogin(): Login
    + getID(): String
    + getPassword(): String
    + getLoginString(): String
    .. Setters ..
    + setName(String): void
    .. Other Methods ..
    + toString(): String
}

class Login {
    - ID: String
    - password: String
    __
    .. Constructors ..
    + Login(String, String)
    .. Getters ..
    + getID(): String
    + getPassword(): String
    .. Other Methods ..
    + verifyLogin(Login): boolean
    + toString(): String
}

class Customer {
    - address: String
    - pin: short
    - loggedIn: boolean
    __
    .. Constructors ..
    + Customer(Login login, String name, short pin)
    + Customer(String name, String ID, String password, short pin, String address)
    .. Getters ..
    + getAddress(): String
    + getPin(): short
    + getLoggedIn(): boolean
    .. Setters ..
    + setAddress(String): void
    + setPin(short): void
    + setLoggedIn(boolean): void
    .. Other Methods ..
    + toString(): String
}

class Account {
    - accountID: String
    - balance: double
    - customerIDS: ArrayList<String>
    - history: ArrayList<Action>
    __
    .. Constructors ..
    + Account()
    + Account(String, ArrayList, double)
    .. Getters ..
    + getAccountID(): String
    + getBalance(): double
    + getHistory(): ArrayList<Action>
    + getCustomerIDS(): ArrayList<String>
    .. Other Methods..
    + depost(double): void
    + withdraw(double): boolean
    + addCustomerID(String): void
    + addHistory(Action): void
    + removeCustomer(String): boolean
}

class BankingSystem {
    __
    .. Constructors ..
    + BankingSystem()
    .. Getters ..
    + getTeller(Login): User
    + getCustomer(Login): Customer
    + getTellers(): ArrayList<User>
    + getCustomers(): ArrayList<Customer>
    + getAccounts(): ArrayList<Account>
    + getCustomerAccounts(String): ArrayList<Accounts>
    .. Data Methods..
    + readData()
    + saveData()
    .. Account/Customer Related Methods ..
    + createAccount(Account): boolean
    + createCustomer(Customer): boolean
    + closeAccount(String): boolean
    + removeCustomer(String): boolean
    .. Request Methods ..
    + login(Login): User
    + deposit(String, double)
    + getAccount(String): Account
    + getCustomer(String): Customer
    + transfer(String, String, double): boolean
    + withdraw(String, double): boolean
    + deleteCustomer(): void
    .. Other Methods ..
    + addHistoryToAccount(String, Transaction)
    + customersToString(): String
    .. Testing ..
    dummyData(): void
}


'#Other Classes
'#--------------------------------------------------
enum TransactionType {
    WITHDRAW
    DEPOSIT
    TRANSFER
}

class Transaction {
    - date: Date
    - description: String
    - amount: double
    - type: TransactionType
    __
    .. Constructors ..
    + Transaction(TransactionType, double, String)
    .. Getters ..
    + getDate(): Date
    + getDescription(): String
    + getAmount(): double
    + getType(): ActionType
}



'#Class Relations
'#--------------------------------------------------
Account "1..*" *-- Transaction

Transaction "1" *-- TransactionType

BankingSystem "0..*" *-d- "1" Customer
BankingSystem "0..*" *-r- "1" Account
BankingSystem "0..*" *-l- "1" User

Login -r-* "1" Customer
Login -u-* "1" User

User <|-- Customer



'#Styling
'#--------------------------------------------------
!theme vibrant

'#remove line curves but the lines are still not straight
'skinparam linetype polyline
'#make the lines straight
skinparam linetype ortho
@enduml















@startuml Request

'#Requests
'#--------------------------------------------------
abstract class Request {
    - date: Date
    - type: ActionType
    - customer: Customer
}

class MoneyRequest {
    - amount: double
    + setType: ActionType
}

class TranserRequest {
    - receivingAccount: Account
}

class WithdrawRequest {
    - amount: double
    + WithdrawRequest(double)
}



'#Styling
'#--------------------------------------------------
!theme reddress-darkgreen

'#remove line curves but the lines are still not straight
'skinparam linetype polyline
'#make the lines straight
skinparam linetype ortho
@enduml
