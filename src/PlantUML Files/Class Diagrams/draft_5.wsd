@startuml Banking System
'#Major Classes
'#--------------------------------------------------
abstract class User {
    - name: String
    - ID: String
    {static} permissions: Vector<ActionType>
    __
    .. Getters ..
    + getName(): String
    + getID(): String
    .. Setters ..
    + setName(String): void
    + setID(String): void
}
note bottom: abstract class that teller\nand customer inherit from

class Login {
    - ID: String
    - password: String
    __
    .. Constructors ..
    + Login(String, String)
    .. Getters ..
    + getID(): String
    + getPassword(): String
    .. Setters ..
    + setID(String): void
    + setPassword(String): void
}
note bottom: used to verify a user

class Customer {
    - address: String
    - pin: short
    - loggedIn: boolean
    __
    .. Constructors ..
    + Customer(Login login, String name, short pin)
    + Customer(String ID, String password, String name, short pin)
    .. Getters ..
    + getAddress(): String
    + getPin(): short
    + getLoggedIn(): boolean
    .. Setters ..
    + setAddress(String): void
    + setPin(short): void
    + setLoggedIn(boolean): void
}
note left: represents a customer\nin the banking system
'note bottom: permissions:\nWITHDRAW\nDEPOSIT\nTRANSFER

class Account {
    - accountID: String
    - balance: double
    __
    .. Constructors ..
    + Account(Customer, double)
    + Account(Vector<Customer>, double)
    .. Getters ..
    + getAccountID(): String
    + getBalance(): double
    + getCustomers(): Vector<Customer>
    .. Other Methods..
    + depost(double): void
    + withdraw(double): boolean
    + addCustomer(Customer)
    + removeCustomer(Customer)
}
note top: represents an account, stores\nbalance and list of people that\nare on the account

class Teller {
    __
    .. Constructors ..
    + Teller()
    '.. Getters .. 
    '.. Setters .. 
    .. Other Methods..
    + sendRequest(Request): Void
}
note top: client
'note left: permissions:\nWITHDRAW\nDEPOSIT\nTRANSFER\nCREATEACCOUNT\nCLOSEACCOUNT\nCREATECUSTOMER\nREMOVECUSTOMER

class ATM {
    - accoundID: String
    - ATMbalance: double
    - inUse: boolean
    __
    .. Constructors ..
    + ATM()
    .. Getters ..
    + getAccountID(): String
    + getBalance(): double
    + getInUse(): boolean
    .. Setters ..
    + setAccoundID(String): void
    + setBalance(double): void
    + setInUse(boolean): void
    .. Other Methods..
    + sendRequest(Request): void
    + addBalance(double): void
    + login(Login): void
    + logout(): void
}
note top: client

class BankingSystem {
    __
    .. Constructors ..
    + BankingSystem()
    .. Getters ..
    + getCustomer(Login): Customer
    + getAccounts(Customer): Vector<Account>
    .. Data Methods..
    + readData()
    + saveData()
    .. Account/Customer Related Methods ..
    + createAccount()
    + createCustomer()
    + closeAccount(Account)
    + deleteCustomer(Customer)
    .. Other Methods ..
    + processRequest(Request): boolean
    + transfer(Account, Account, double): boolean
}
note top: server
'note top of BankingSystem: maybe store accounts and customers\nin map in order to search by id



'#Other Classes
'#--------------------------------------------------
enum ActionType {
    WITHDRAW
    DEPOSIT
    TRANSFER
    CREATEACCOUNT
    CLOSEACCOUNT
    CREATECUSTOMER
    REMOVECUSTOMER
}
note bottom: types of actions\nthat can be done

class Action {
    - date: Date
    - description: String
    __
    .. Constructors ..
    + Action(ActionType, String)
    .. Getters ..
    + getDate(): Date
    + getActionType(): ActionType
    + getMsg(): String
}
note bottom: used to save history of actions that\nhave been done an Account, such\nas transaction history
'note top of Action: possibly have other classes\nthat inherit action to store\ndifferent information\n\nmight be able to mergeAction\nand Request

abstract class Request
note left of Request: requests will be objects that hold\ndata relevent to an action\n(withdraw, deposit, etc.)
note bottom of Request: clients send Requests to\nBankingSystem for it to\nverify, process, and execute



'#Class Relations
'#--------------------------------------------------
Account "1..*" *-l- Customer
Account "1..*" *-d- Action

Action "1" *-l- ActionType

BankingSystem "0..*" *-d- "1" Customer
BankingSystem "0..*" *-d- "1" Account
BankingSystem "0..*" *-l- "1" Teller
BankingSystem "0..*" *-r- "1" ATM

Customer -u-* "0..1" ATM

Login -u-* "1" Customer
Login -u-* "1" Teller
Login -u-* "1" ATM

Request "1" *-r- ActionType

User <|-u- Customer
User <|-u- Teller



'#Styling
'#--------------------------------------------------
!theme vibrant

'#remove line curves but the lines are still not straight
'skinparam linetype polyline
'#make the lines straight
skinparam linetype ortho
@enduml















@startuml Request

'#Requests
'#--------------------------------------------------
abstract class Request {
    - date: Date
    - type: ActionType
    - customer: Customer
}

class MoneyRequest {
    - amount: double
    + setType: ActionType
}

class TranserRequest {
    - receivingAccount: Account
}

class WithdrawRequest {
    - amount: double
    + WithdrawRequest(double)
}



'#Styling
'#--------------------------------------------------
!theme reddress-darkgreen

'#remove line curves but the lines are still not straight
'skinparam linetype polyline
'#make the lines straight
skinparam linetype ortho
@enduml
